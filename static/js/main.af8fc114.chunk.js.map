{"version":3,"sources":["components/loader.component.jsx","components/country-selector/country-selector.component.jsx","components/time/time.component.jsx","components/field/field.component.jsx","components/fields/fields.component.jsx","screens/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Loader","Container","className","style","height","Spinner","animation","role","CountrySelector","data","handleSelect","selectedCountry","handleSearch","searchString","dropdownItems","filteredData","filter","o","includes","country","toLowerCase","sortBy","map","d","push","Dropdown","Item","value","key","active","onClick","event","Toggle","variant","id","Menu","Form","Control","onChange","e","type","placeholder","Time","props","tick","setState","time","moment","state","this","timeInterval","setInterval","clearInterval","format","React","Component","Field","num","title","color","Card","text","bg","Body","Title","Text","toString","replace","Fields","selectedItem","find","fields","Object","keys","includedFields","label","Fragment","Row","field","include","undefined","Col","Homepage","target","getAttribute","axios","get","then","response","length","fluid","Jumbotron","process","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af8fc114.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Spinner } from 'react-bootstrap';\n\nconst Loader = () => (\n  <Container\n    className=\"d-flex align-items-center justify-content-center\"\n    style={{ height: '100vh' }}\n  >\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  </Container>\n);\n\nexport default Loader;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport filter from 'lodash/filter';\nimport includes from 'lodash/includes';\nimport sortBy from 'lodash/sortBy';\n\nimport './country-selector.styles.css';\n\nconst CountrySelector = ({ data, handleSelect, selectedCountry, handleSearch, searchString }) => {\n  let dropdownItems = [];\n  let filteredData = filter(data, (o) =>\n    includes(o.country.toLowerCase(), searchString.toLowerCase())\n  );\n\n  // sort by country alphabetical\n  filteredData = sortBy(filteredData, (o) => o.country);\n\n  // eslint-disable-next-line\n  filteredData.map((d) => {\n    dropdownItems.push(\n      <Dropdown.Item\n        value={d.country}\n        key={d.country}\n        active={d.country === selectedCountry}\n        onClick={(event) => handleSelect(event)}\n      >\n        {d.country}\n      </Dropdown.Item>\n    );\n  });\n  return (\n    <Dropdown>\n      <Dropdown.Toggle className=\"btn-lg\" variant=\"primary\" id=\"dropdown-basic\">\n        {selectedCountry}\n      </Dropdown.Toggle>\n\n      <Dropdown.Menu>\n        <div className=\"px-4 my-2\">\n          <Form.Control\n            onChange={(e) => handleSearch(e)}\n            type=\"search\"\n            placeholder=\"Search your country...\"\n          />\n        </div>\n        <div className=\"dropdown-menu-list\">{dropdownItems}</div>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nCountrySelector.propTypes = {\n  data: PropTypes.array\n};\n\nexport default CountrySelector;\n","import React from 'react';\nimport moment from 'moment';\n\nclass Time extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: moment()\n    };\n  }\n\n  tick = () => {\n    this.setState({ time: moment() });\n  };\n\n  componentDidMount() {\n    this.timeInterval = setInterval(() => {\n      this.tick();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timeInterval);\n  }\n\n  render() {\n    const { time } = this.state;\n    return (\n      <div className=\"time\">\n        <p>\n          As of <strong>{`${time.format('dddd, D MMM YYYY')} ${time.format('hh:mm:ss A')}`}</strong>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Time;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'react-bootstrap';\n\nimport './field.styles.css';\n\nconst Field = ({ title, value, color }) => {\n  const formatNumber = (num) => {\n    if (!num) return 0;\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  };\n  return (\n    <Card text=\"white\" bg={color} className=\"mb-4\">\n      <Card.Body className=\"text-center my-4\">\n        <Card.Title>\n          <strong>{title}</strong>\n        </Card.Title>\n        <Card.Text className=\"figure\">{formatNumber(value)}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nField.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired\n};\n\nexport default Field;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Field from 'components/field/field.component';\nimport { Row, Col } from 'react-bootstrap';\nimport find from 'lodash/find';\n\nconst Fields = ({ country, data }) => {\n  const selectedItem = find(data, (d) => d.country === country);\n  const fields = Object.keys(selectedItem);\n  const includedFields = [\n    { key: 'cases', label: 'Total Cases', variant: 'info' },\n    { key: 'todayCases', label: 'New Cases', variant: 'warning' },\n    { key: 'deaths', label: 'Total Deaths', variant: 'danger' },\n    { key: 'recovered', label: 'Total Recoveries', variant: 'success' }\n  ];\n\n  return (\n    <React.Fragment>\n      <Row>\n        {/* eslint-disable-next-line array-callback-return */}\n        {fields.map((field) => {\n          let include = find(includedFields, (o) => {\n            return o.key === field;\n          });\n          if (include !== undefined) {\n            return (\n              <Col key={field}>\n                <Field title={include.label} value={selectedItem[field]} color={include.variant} />\n              </Col>\n            );\n          }\n        })}\n      </Row>\n    </React.Fragment>\n  );\n};\n\nFields.propTypes = {\n  country: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired\n};\n\nexport default Fields;\n","import React from 'react';\nimport Loader from 'components/loader.component';\nimport CountrySelector from 'components/country-selector/country-selector.component';\nimport Time from 'components/time/time.component';\nimport Fields from 'components/fields/fields.component';\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport axios from 'axios';\nimport './homepage.styles.css';\n\nclass Homepage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      country: 'World',\n      searchString: ''\n    };\n  }\n\n  componentDidMount() {\n    // get covid-19 data\n    axios.get('https://coronavirus-19-api.herokuapp.com/countries').then((response) => {\n      let data = response.data;\n      this.setState({ data });\n    });\n\n    // get user location\n    // axios.get('https://ip-api.com/json').then((response) => {\n    //   console.log('location', response.data);\n    //   this.setState({ country: response.data.country });\n    // });\n  }\n\n  handleSelect = (event) => {\n    this.setState({ country: event.target.getAttribute('value') });\n  };\n\n  handleSearch = (event) => {\n    this.setState({ searchString: event.target.value });\n  };\n\n  render() {\n    const { data, country, searchString } = this.state;\n    if (data.length === 0 || !country) return <Loader />;\n    // console.log('data', data);\n    return (\n      <Container fluid>\n        <Jumbotron className=\"mt-3\">\n          <h1>Covid-19 Updates</h1>\n          <Time />\n          <p className=\"lead\">\n            This page updates everyday so you stay updated on the global situation regarding the\n            Coronovirus pandemic\n          </p>\n          <CountrySelector\n            data={data}\n            handleSelect={this.handleSelect}\n            selectedCountry={country}\n            handleSearch={this.handleSearch}\n            searchString={searchString}\n          />\n        </Jumbotron>\n        <Fields country={country} data={data} />\n        <footer className=\"py-3\">\n          <p className=\"text-muted\">&copy; reddeguzman | {`v${process.env.REACT_APP_VERSION}`}</p>\n        </footer>\n      </Container>\n    );\n  }\n}\n\nexport default Homepage;\n","import React from 'react';\nimport HomePage from 'screens/homepage/homepage.component';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}